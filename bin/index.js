#!/usr/bin/env node
/*!
@io-arc/preset-setup-files
Make it easy to install frequently used files.

Version: 1.0.0
License: MIT
Documents: https://github.com/io-arc/preset-setup-files#readme

Copyright (c) 2021 arc one
*/
"use strict";var e=require("commander"),t=require("kleur"),i=require("update-notifier"),r=require("fs"),s=require("inquirer"),c=require("os"),o=require("path"),l=require("cpx");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=a(i),h=a(r),p=a(s),u=a(c),m=a(o),d=a(l);class f{exit(e){console.log(t.red("Oops X(")),e&&console.log(t.red(JSON.stringify(e))),process.exit(1)}}class g extends f{constructor(){if(super(),this.#choiceDataFile=`${u.default.homedir()}/.preset-setup-files-config.json`,this.#isExist=!1,this.#templateDir=`${m.default.dirname(__filename)}/templates`,this.#updateTemplateDir=!1,!h.default.existsSync(this.#choiceDataFile))return;this.#isExist=!0;const{choices:e,templateDirectory:t}=JSON.parse(h.default.readFileSync(this.#choiceDataFile,"utf8"));this.#choices=e,t&&(this.#configTemplateDirectory=t,this.#templateDir=t)}#choiceDataFile;#choices;#isExist;#configTemplateDirectory;#templateDir;#updateTemplateDir;file(){return this.#choiceDataFile}existsFile(){return this.#isExist}templateDir(){return this.#templateDir}existChoices(){return this.#choices}async setTemplateDir(){try{const{dir:e}=await p.default.prompt([{type:"input",name:"dir",default:this.#configTemplateDirectory||"",message:"Using custom templates directory path",suffix:`\n${t.gray("Leave it empty if you want to use the default.\nUse Backspace to delete the path if it exists.")}`}]);""!==e&&(this.#templateDir=e.replace(/\/$/,""),this.#updateTemplateDir=!0)}catch(e){this.exit(e)}}save(e){const i={choices:e};this.#updateTemplateDir&&(i.templateDirectory=this.#templateDir);try{h.default.writeFileSync(this.#choiceDataFile,JSON.stringify(i)),console.log(t.green("Create a config file into ")+t.bold().blue(this.#choiceDataFile))}catch(e){this.exit(e)}}}const y={editorConfig:".editorConfig",gitignore:".gitignore",npmrc:".npmrc",npmignore:".npmignore",browserslistrc:".browserslistrc",prettierrc:".prettierrc",prettierrcJson:".prettierrc.json",prettierrcJson5:".prettierrc.json5",prettierrcYml:".prettierrc.yml",prettierrcYaml:".prettierrc.yaml",prettierrcJs:".prettierrc.js",prettierrcCjs:".prettierrc.cjs",prettierrcConfigJs:".prettierrc.config.js",prettierrcConfigCjs:".prettierrc.config.cjs",prettierrcToml:".prettierrc.toml",eslintrcJs:".eslintrc.js",eslintrcCjs:".eslintrc.cjs",eslintrcYml:".eslintrc.yml",eslintrcYaml:".eslintrc.yaml",eslintrcJson:".eslintrc.json",eslintignore:".eslintignore"};class k extends f{constructor(e,i){super(),this.#checkedItem=[y.editorConfig,y.gitignore,y.browserslistrc,y.prettierrc,y.eslintrcYml],this.#checkbox=async()=>{const{editorConfig:e,gitignore:i,npmrc:r,npmignore:s,browserslistrc:c,prettierrc:o,prettierrcJson:l,prettierrcJson5:a,prettierrcYml:n,prettierrcYaml:h,prettierrcJs:u,prettierrcCjs:m,prettierrcConfigJs:d,prettierrcConfigCjs:f,prettierrcToml:g,eslintrcJs:k,eslintrcCjs:v,eslintrcYml:D,eslintrcYaml:x,eslintrcJson:w,eslintignore:C}=y;try{const t=await p.default.prompt([{type:"checkbox",name:"templates",message:"Choice setup files",loop:!1,choices:[{value:e,checked:this.#setBool(e)},{value:i,checked:this.#setBool(i)},{value:r,checked:this.#setBool(r)},{value:s,checked:this.#setBool(s)},{value:c,checked:this.#setBool(c)},new p.default.Separator,{value:o,checked:this.#setBool(o)},{value:l,checked:this.#setBool(l)},{value:a,checked:this.#setBool(a)},{value:n,checked:this.#setBool(n)},{value:h,checked:this.#setBool(h)},{value:u,checked:this.#setBool(u)},{value:m,checked:this.#setBool(m)},{value:d,checked:this.#setBool(d)},{value:f,checked:this.#setBool(f)},{value:g,checked:this.#setBool(g)},new p.default.Separator,{value:k,checked:this.#setBool(k)},{value:v,checked:this.#setBool(v)},{value:D,checked:this.#setBool(D)},{value:x,checked:this.#setBool(x)},{value:w,checked:this.#setBool(w)},new p.default.Separator,{value:C,checked:this.#setBool(C)},new p.default.Separator]},{type:"confirm",name:"confirm",message:"Are you sure you want to create this?",default:!0}]);return this.#updateChecked(t.templates),{confirm:t.confirm}}catch(e){return console.log(t.red(e)),1}},this.#updateChecked=e=>{this.#checkedItem=e},this.#setBool=e=>this.#checkedItem.includes(e),console.log(e),this.#templateDir=e,i&&(this.#checkedItem=i)}#checkedItem;#templateDir;items(){return this.#checkedItem}async choices(){const e=await this.#checkbox();if("number"!=typeof e){if(!e.confirm){const[e]=await Promise.all([this.choices()]);return e}}else this.exit()}async copy(){try{const{overwrite:e}=await p.default.prompt({type:"confirm",name:"overwrite",message:"If the file has the same name, it will be overwritten.",default:!1}),i=(e=>{const t=e.join(",");return 1===e.length?t:`{${t}}`})(this.#checkedItem);d.default.copySync(`${this.#templateDir}/${i}`,"",{update:!e}),console.log(t.green("=== Files copy is done! ==="))}catch(e){this.exit(e)}}#checkbox;#updateChecked;#setBool}n.default({pkg:{name:"@io-arc/preset-setup-files",version:"1.0.0"}}).notify(),process.stdin.resume(),process.on("SIGINT",(()=>{console.log(t.green("Bye !")),process.exit(0)})),e.program.version("1.0.0").option("--custom","Customize default choices and copy directories.",!1).option("-c, --config","Current settings",!1).parse(process.argv),(async({custom:e,config:i})=>{const r=new g,s=new k(r.templateDir(),r.existChoices());if(i){console.log(t.bold().blue("=== Current settings ===")),console.log(`Default choices: ${t.bold().green(s.items().join(", "))}`),console.log(`Templates directory: ${t.bold().green(r.templateDir())}`);const e=r.existsFile()?t.bold().green(r.file()):t.gray("No exists");return console.log(`Config file: ${e}`),void process.exit(0)}if(e)return console.log(t.bold().blue("=== Custom settings ===")),await s.choices(),await r.setTemplateDir(),r.save(s.items()),void process.exit(0);await s.choices(),await s.copy(),process.exit(0)})(e.program.opts());
